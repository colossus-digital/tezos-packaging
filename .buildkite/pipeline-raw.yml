# SPDX-FileCopyrightText: 2019-2021 TQ Tezos <https://tqtezos.com/>
#
# SPDX-License-Identifier: LicenseRef-MIT-TQ

env:
  SET_VERSION: "export TEZOS_VERSION=\"$(cat nix/nix/sources.json | jq -r '.tezos.ref' | cut -d'/' -f3)\""

steps:
 - key: reuse-lint
   command: nix run -f . pkgs.reuse -c reuse lint
 - key: check-trailing-whitespace
   command: .buildkite/check-trailing-whitespace.sh
 - key: crossref-verify
   command: "nix run -f https://github.com/serokell/crossref-verifier/archive/68a1f9d25b6e7835fea8299b18a3e6c61dbb2a5c.tar.gz -c crossref-verify"
   soft_fail: true
 - key: lint-python-code
   command: nix run -f . pkgs.python39Packages.black -c black --check --diff --color .
 - key: pipeline-filtering
   command: nix-shell .buildkite/shell.nix --run 'nix run -f . pkgs.bats -c ./tests/buildkite/filter-pipeline.bats'
   only_changes:
   - .buildkite/filter-pipeline.py
   - tests/buildkite/.*

 - key: build-via-nix
   commands:
   - nix-build ./nix -A binaries -o binaries
   branches: "!master"
 - key: test nix-built binaries
   commands:
   - nix-build tests/tezos-nix-binaries.nix --no-out-link
   branches: "!master"
   # nix builds are usually cached, so we don't care about only_changes setting for it

 - key: build-via-docker
   commands:
   - eval "$SET_VERSION"
   - cd docker
   - ./docker-static-build.sh
   - nix run -f.. pkgs.upx -c upx tezos-*
   artifact_paths:
     - ./docker/tezos-*
   agents:
     queue: "docker"
   only_changes: &static_binaries_changes_regexes
   - docker/build/.*
   - docker/docker-static-build.sh
   - meta.json
   - protocols.json
   - nix/nix/sources.json
 # arm builer is an ubuntu machine without nix
 - key: build-arm-via-docker
   commands:
   - eval "$SET_VERSION"
   - cd docker
   - ./docker-static-build.sh
   - upx tezos-*
   - >
     for f in ./tezos-*; do
       mv "\$f" "\$f-arm64"
     done
   artifact_paths:
     - ./docker/tezos-*
   agents:
     queue: "arm64-build"
   only_changes: *static_binaries_changes_regexes

 - key: check-brew-formulas
   commands:
     # Check all formulas except 'tezos.rb' because it's a base class for all other formulas
     - find ./Formula -type f -name "*.rb" -exec ruby -c {} +
     # All formulas share the same source URL inherited by the Tezos class, so it's fine
     # to fetch sources for only one formula
     - brew fetch -s ./Formula/tezos-client.rb
   agents:
     queue: "x86_64-darwin"
   only_changes:
   - Formula/.*.rb

 - key: test-nixos-modules
   commands:
   - nix-build tests/tezos-modules.nix --no-out-link

 # build-arm-via-docker and build-via-docker artifacts are used in the subsequent steps
 - wait

 - key: test-docker-built-binaries
   commands:
   - buildkite-agent artifact download "docker/*" . --step "build-via-docker"
   - chmod +x ./docker/*
   - nix-build tests/tezos-binaries.nix --no-out-link --arg path-to-binaries ./docker
   branches: "!master"
   depends_on:
    - "build-via-docker"
   only_changes:
   - tests/tezos-binaries.nix
   - tests/test_script.py
   # files from nix/ are massively used in tests ifrastructure
   - nix/.*

 - key: test-deb-source-packages-via-docker
   commands:
   - eval "$SET_VERSION"
   - ./docker/docker-tezos-packages.sh --os ubuntu --type source
   artifact_paths:
     - ./out/*
   branches: "!master"
   timeout_in_minutes: 60
   agents:
     queue: "docker"
   only_changes: &native_packaging_changes_regexes
   - docker/package/.*
   - docker/docker-tezos-packages.sh
   - meta.json
   - protocols.json
   - nix/nix/sources.json
 - key: test-deb-binary-packages-via-docker
   commands:
   - eval "$SET_VERSION"
   # Building all binary packages will take significant amount of time, so we build only one
   # in order to ensure package generation sanity
   - ./docker/docker-tezos-packages.sh --os ubuntu --type binary --package tezos-baker-009-PsFLoren
   - rm -rf out
   # It takes much time to build binary package, so we do it only on master
   branches: "master"
   timeout_in_minutes: 90
   agents:
     queue: "docker"
   only_changes: *native_packaging_changes_regexes
 - key: test-rpm-source-packages-via-docker
   commands:
   - eval "$SET_VERSION"
   - ./docker/docker-tezos-packages.sh --os fedora --type source
   artifact_paths:
     - ./out/*
   branches: "!master"
   timeout_in_minutes: 60
   agents:
     queue: "docker"
   only_changes: *native_packaging_changes_regexes
 - key: test-rpm-binary-packages-via-docker
   commands:
   - eval "$SET_VERSION"
   # Building all binary packages will take significant amount of time, so we build only one
   # in order to ensure package generation sanity
   - ./docker/docker-tezos-packages.sh --os fedora --type binary --package tezos-baker-009-PsFLoren
   - rm -rf out
   # It takes much time to build binary package, so we do it only on master
   branches: "master"
   timeout_in_minutes: 90
   agents:
     queue: "docker"
   only_changes: *native_packaging_changes_regexes

 - key: create-auto-pre-release
   commands:
   - mkdir binaries
   - mkdir arm-binaries
   - buildkite-agent artifact download "docker/*" binaries --step "build-via-docker"
   - buildkite-agent artifact download "docker/*" arm-binaries --step "build-arm-via-docker"
   - ls binaries
   - ./scripts/autorelease.sh
   branches: master
   depends_on:
    - "build-via-docker"
    - "build-arm-via-docker"
   only_changes:
   - scripts/autorelease.sh
   - scripts/shell.nix
   # files from 'nix/' directory are used in the autorelease script
   - nix/.*
   - default.nix
   - release.nix
